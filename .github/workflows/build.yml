name: "Build & Publish"

on:
  push:
    branches-ignore:
      - 'l10n_master'
  release:
    types:
      - published


jobs:
  cloc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up cloc
        run: |
          sudo apt update
          sudo apt -y install cloc
      - name: Print lines of code
        run: cloc --include-lang TypeScript,JavaScript,HTML,Sass,CSS --vcs git


  windows:
    runs-on: windows-latest
    if: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Windows builder
        run: choco install checksum --no-progress

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Download & Install RH
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri http://www.angusj.com/resourcehacker/resource_hacker.zip -OutFile "resource_hacker.zip"
          Expand-Archive -Path resource_hacker.zip -DestinationPath scripts/resource_hacker
          echo "D:\a\cli\cli\scripts\resource_hacker" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set PACKAGE_VERSION & VER_INFO
        run: |
          $env:pkgVersion = (Get-Content -Raw -Path .\src\package.json | ConvertFrom-Json).version
          echo "PACKAGE_VERSION=$env:pkgVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "WIN_PKG=$env:WIN_PKG" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "version: $env:pkgVersion"

          if(Test-Path -Path $env:WIN_PKG) {
            echo "VER_INFO=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
        env:
          WIN_PKG: C:\Users\appveyor\.pkg-cache\v2.5\fetched-v10.4.1-win-x64

      - name: Keytar
        shell: pwsh
        run: |
          $keytarVersion = (Get-Content -Raw -Path .\src\package.json | ConvertFrom-Json).dependencies.keytar
          $nodeModVersion = node -e "console.log(process.config.variables.node_module_version)"
          $keytarTar = "keytar-v${keytarVersion}-node-v${nodeModVersion}-{0}-x64.tar"
          $keytarTarGz = "${keytarTar}.gz"
          $keytarUrl = "https://github.com/atom/node-keytar/releases/download/v${keytarVersion}/${keytarTarGz}"

          New-Item -ItemType directory -Path .\keytar\macos | Out-Null
          New-Item -ItemType directory -Path .\keytar\linux | Out-Null
          New-Item -ItemType directory -Path .\keytar\windows | Out-Null

          Invoke-RestMethod -Uri $($keytarUrl -f "darwin") -OutFile ".\keytar\macos\$($keytarTarGz -f "darwin")"
          Invoke-RestMethod -Uri $($keytarUrl -f "linux") -OutFile ".\keytar\linux\$($keytarTarGz -f "linux")"
          Invoke-RestMethod -Uri $($keytarUrl -f "win32") -OutFile ".\keytar\windows\$($keytarTarGz -f "win32")"

          7z e ".\keytar\macos\$($keytarTarGz -f "darwin")" -o".\keytar\macos"
          7z e ".\keytar\linux\$($keytarTarGz -f "linux")" -o".\keytar\linux"
          7z e ".\keytar\windows\$($keytarTarGz -f "win32")" -o".\keytar\windows"

          7z e ".\keytar\macos\$($keytarTar -f "darwin")" -o".\keytar\macos"
          7z e ".\keytar\linux\$($keytarTar -f "linux")" -o".\keytar\linux"
          7z e ".\keytar\windows\$($keytarTar -f "win32")" -o".\keytar\windows"

      - name: Setup Version Info
        shell: pwsh
        run: .\scripts\make-versioninfo.ps1

      - name: Resource Hacker
        shell: cmd
        run: |
          echo Package Version: %WIN_PKG%
          if defined VER_INFO ResourceHacker -open %WIN_PKG% -save %WIN_PKG% -action delete -mask ICONGROUP,1,
          if defined VER_INFO ResourceHacker -open version-info.rc -save version-info.res -action compile
          if defined VER_INFO ResourceHacker -open %WIN_PKG% -save %WIN_PKG% -action addoverwrite -resource version-info.res

      - name: Install
        run: npm install

      - name: npm rebuild
        run: npm run rebuild

      # Currently not being signed, need the HSM backed Azure Key Vault
      - name: Package Windows
        run: npm run dist:win:ci

      # I think this should be moved to another job
      - name: NPM reset
        run: npm run reset

      - name: Package CLI
        run: npm run dist:cli

      - name: Zip
        shell: cmd
        run: |
          7z a ./dist-cli/bwdc-windows-%PACKAGE_VERSION%.zip ./dist-cli/windows/bwdc.exe ./keytar/windows/keytar.node
          7z a ./dist-cli/bwdc-macos-%PACKAGE_VERSION%.zip ./dist-cli/macos/bwdc ./keytar/macos/keytar.node
          7z a ./dist-cli/bwdc-linux-%PACKAGE_VERSION%.zip ./dist-cli/linux/bwdc ./keytar/linux/keytar.node

      - name: Version Test
        run: |
          Expand-Archive -Path "./dist-cli/bwdc-windows-${env:PACKAGE_VERSION}.zip" -DestinationPath "./test/windows"
          $testVersion = Invoke-Expression '& ./test/windows/bwdc.exe -v'
          echo "version: $env:PACKAGE_VERSION"
          echo "testVersion: $testVersion"
          if($testVersion -ne $env:PACKAGE_VERSION) {
            Throw "Version test failed."
          }

      - name: Create checksums
        run: |
          checksum -f="./dist-cli/bwdc-windows-${env:PACKAGE_VERSION}.zip" `
            -t sha256 | Out-File ./dist-cli/bwdc-windows-sha256-${env:PACKAGE_VERSION}.txt
          checksum -f="./dist-cli/bwdc-macos-${env:PACKAGE_VERSION}.zip" `
            -t sha256 | Out-File ./dist-cli/bwdc-macos-sha256-${env:PACKAGE_VERSION}.txt
          checksum -f="./dist-cli/bwdc-linux-${env:PACKAGE_VERSION}.zip" `
            -t sha256 | Out-File ./dist-cli/bwdc-linux-sha256-${env:PACKAGE_VERSION}.txt

      - name: Debugging file paths - dist
        run: dir ./dist

      - name: Debugging file paths - dist
        run: dir ./dist-cli

      - name: Publish windows zip to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: bwdc-windows-${{ env.PACKAGE_VERSION }}.zip
          path: ./dist-cli/bwdc-windows-${{ env.PACKAGE_VERSION }}.zip

      - name: Publish mac zip to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: bwdc-macos-${{ env.PACKAGE_VERSION }}.zip
          path: ./dist-cli/bwdc-macos-${{ env.PACKAGE_VERSION }}.zip

      - name: Publish linux zip to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: bwdc-linux-${{ env.PACKAGE_VERSION }}.zip
          path: ./dist-cli/bwdc-linux-${{ env.PACKAGE_VERSION }}.zip

      - name: Publish windows checksum to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: bwdc-windows-sha256-${{ env.PACKAGE_VERSION }}.txt
          path: ./dist-cli/bwdc-windows-sha256-${{ env.PACKAGE_VERSION }}.txt

      - name: Publish mac checksum to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: bwdc-macos-sha256-${{ env.PACKAGE_VERSION }}.txt
          path: ./dist-cli/bwdc-macos-sha256-${{ env.PACKAGE_VERSION }}.txt

      - name: Publish linux checksum to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: bwdc-linux-sha256-${{ env.PACKAGE_VERSION }}.txt
          path: ./dist-cli/bwdc-linux-sha256-${{ env.PACKAGE_VERSION }}.txt

      - name: Publish Portable Exe to GitHub
        if: false
        uses: actions/upload-artifact@v2
        with:
          name: Bitwarden-Connector-Portable-${{ env.PACKAGE_VERSION }}.exe
          path: ./dist/Bitwarden-Connector-Portable-${{ env.PACKAGE_VERSION }}.exe

      - name: Publish Installer Exe to GitHub
        if: false
        uses: actions/upload-artifact@v2
        with:
          name: Bitwarden-Connector-Installer-${{ env.PACKAGE_VERSION }}.exe
          path: ./dist/Bitwarden-Connector-Installer-${{ env.PACKAGE_VERSION }}.exe


  linux:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Set Node options
        run: echo "NODE_OPTIONS=--max_old_space_size=4096" >> $GITHUB_ENV

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get -y install pkg-config libxss-dev libsecret-1-dev rpm

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set PACKAGE_VERSION
        run: |
          $env:pkgVersion = (Get-Content -Raw -Path .\src\package.json | ConvertFrom-Json).version
          echo "PACKAGE_VERSION=$env:pkgVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "version: $env:pkgVersion"

      - name: npm install
        run: npm install

      - name: npm rebuild
        run: npm run rebuild

      - name: npm package
        run: npm run dist:lin

      - name: Publish AppImage
        uses: actions/upload-artifact@v2
        with:
          name: Bitwarden-Connector-${{ env.PACKAGE_VERSION }}-x86_64.AppImage
          path: ./dist/Bitwarden-Connector-${{ env.PACKAGE_VERSION }}-x86_64.AppImage
