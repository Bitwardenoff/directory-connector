name: Release

on:
  workflow_dispatch:
    inputs:
      release_tag_name:
        description: "Release Tag Name (vX.X.X)"
        required: true


jobs:
  cloc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up cloc
        run: |
          sudo apt update
          sudo apt -y install cloc
      - name: Print lines of code
        run: cloc --include-lang TypeScript,JavaScript,HTML,Sass,CSS --vcs git


  setup:
    runs-on: ubuntu-latest
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Create Release Name
        run: |
          echo "RELEASE_NAME=${RELEASE_TAG_NAME:1}" >> $GITHUB_ENV
        env:
          RELEASE_TAG_NAME: ${{ github.event.inputs.release_tag_name }}

      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_tag_name }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: true
          prerelease: false


  windows-cli:
    runs-on: windows-latest
    needs: setup
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Windows builder
        run: choco install checksum --no-progress

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Install pkg-fetch
        run: |
          $fetchedUrl = "https://github.com/vercel/pkg-fetch/releases/download/v2.5/uploaded-v2.5-node-v10.4.1-win-x64"

          New-Item -ItemType directory -Path .\.pkg-cache
          Invoke-RestMethod -Uri $fetchedUrl -OutFile ".\.pkg-cache\fetched-v10.4.1-win-x64"

      - name: Download & Install RH
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri http://www.angusj.com/resourcehacker/resource_hacker.zip -OutFile "resource_hacker.zip"
          Expand-Archive -Path resource_hacker.zip -DestinationPath scripts/resource_hacker
          echo "D:\a\cli\cli\scripts\resource_hacker" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set PACKAGE_VERSION & VER_INFO
        run: |
          $env:pkgVersion = (Get-Content -Raw -Path .\src\package.json | ConvertFrom-Json).version
          echo "PACKAGE_VERSION=$env:pkgVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "WIN_PKG=$env:WIN_PKG" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "version: $env:pkgVersion"

          if(Test-Path -Path $env:WIN_PKG) {
            echo "VER_INFO=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
        env:
          WIN_PKG: C:\Users\runneradmin\.pkg-cache\v2.5\fetched-v10.4.1-win-x64

      - name: Keytar
        shell: pwsh
        run: |
          $keytarVersion = (Get-Content -Raw -Path .\src\package.json | ConvertFrom-Json).dependencies.keytar
          $nodeModVersion = node -e "console.log(process.config.variables.node_module_version)"
          $keytarTar = "keytar-v${keytarVersion}-node-v${nodeModVersion}-{0}-x64.tar"
          $keytarTarGz = "${keytarTar}.gz"
          $keytarUrl = "https://github.com/atom/node-keytar/releases/download/v${keytarVersion}/${keytarTarGz}"

          New-Item -ItemType directory -Path .\keytar\macos | Out-Null
          New-Item -ItemType directory -Path .\keytar\linux | Out-Null
          New-Item -ItemType directory -Path .\keytar\windows | Out-Null

          Invoke-RestMethod -Uri $($keytarUrl -f "darwin") -OutFile ".\keytar\macos\$($keytarTarGz -f "darwin")"
          Invoke-RestMethod -Uri $($keytarUrl -f "linux") -OutFile ".\keytar\linux\$($keytarTarGz -f "linux")"
          Invoke-RestMethod -Uri $($keytarUrl -f "win32") -OutFile ".\keytar\windows\$($keytarTarGz -f "win32")"

          7z e ".\keytar\macos\$($keytarTarGz -f "darwin")" -o".\keytar\macos"
          7z e ".\keytar\linux\$($keytarTarGz -f "linux")" -o".\keytar\linux"
          7z e ".\keytar\windows\$($keytarTarGz -f "win32")" -o".\keytar\windows"

          7z e ".\keytar\macos\$($keytarTar -f "darwin")" -o".\keytar\macos"
          7z e ".\keytar\linux\$($keytarTar -f "linux")" -o".\keytar\linux"
          7z e ".\keytar\windows\$($keytarTar -f "win32")" -o".\keytar\windows"

      - name: Setup Version Info
        shell: pwsh
        run: .\scripts\make-versioninfo.ps1

      - name: Resource Hacker
        shell: cmd
        run: |
          echo VER_INFO: %VER_INFO%
          if defined VER_INFO ResourceHacker -open %WIN_PKG% -save %WIN_PKG% -action delete -mask ICONGROUP,1,
          if defined VER_INFO ResourceHacker -open version-info.rc -save version-info.res -action compile
          if defined VER_INFO ResourceHacker -open %WIN_PKG% -save %WIN_PKG% -action addoverwrite -resource version-info.res

      - name: Install
        run: npm install

      - name: Package CLI
        run: npm run dist:cli

      - name: Zip
        shell: cmd
        run: |
          7z a ./dist-cli/bwdc-windows-%PACKAGE_VERSION%.zip ./dist-cli/windows/bwdc.exe ./keytar/windows/keytar.node
          7z a ./dist-cli/bwdc-macos-%PACKAGE_VERSION%.zip ./dist-cli/macos/bwdc ./keytar/macos/keytar.node
          7z a ./dist-cli/bwdc-linux-%PACKAGE_VERSION%.zip ./dist-cli/linux/bwdc ./keytar/linux/keytar.node

      - name: Version Test
        run: |
          Expand-Archive -Path "./dist-cli/bwdc-windows-${env:PACKAGE_VERSION}.zip" -DestinationPath "./test/windows"
          $testVersion = Invoke-Expression '& ./test/windows/bwdc.exe -v'
          echo "version: $env:PACKAGE_VERSION"
          echo "testVersion: $testVersion"
          if($testVersion -ne $env:PACKAGE_VERSION) {
            Throw "Version test failed."
          }

      - name: Create checksums
        run: |
          checksum -f="./dist-cli/bwdc-windows-${env:PACKAGE_VERSION}.zip" `
            -t sha256 | Out-File ./dist-cli/bwdc-windows-sha256-${env:PACKAGE_VERSION}.txt
          checksum -f="./dist-cli/bwdc-macos-${env:PACKAGE_VERSION}.zip" `
            -t sha256 | Out-File ./dist-cli/bwdc-macos-sha256-${env:PACKAGE_VERSION}.txt
          checksum -f="./dist-cli/bwdc-linux-${env:PACKAGE_VERSION}.zip" `
            -t sha256 | Out-File ./dist-cli/bwdc-linux-sha256-${env:PACKAGE_VERSION}.txt

      - name: upload windows zip release asset
        id: upload-windows-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.release_upload_url }}
          asset_path: ./dist-cli/bwdc-windows-${{ env.PACKAGE_VERSION }}.zip
          asset_name: bwdc-windows-${{ env.PACKAGE_VERSION }}.zip
          asset_content_type: application/zip

      - name: upload macos zip release asset
        id: upload-macos-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.release_upload_url }}
          asset_path: ./dist-cli/bwdc-macos-${{ env.PACKAGE_VERSION }}.zip
          asset_name: bwdc-macos-${{ env.PACKAGE_VERSION }}.zip
          asset_content_type: application/zip

      - name: upload linux zip release asset
        id: upload-linux-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.release_upload_url }}
          asset_path: ./dist-cli/bwdc-linux-${{ env.PACKAGE_VERSION }}.zip
          asset_name: bwdc-linux-${{ env.PACKAGE_VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload windows checksum release asset
        id: upload-windows-checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.release_upload_url }}
          asset_path: ./dist-cli/bwdc-windows-sha256-${{ env.PACKAGE_VERSION }}.txt
          asset_name: bwdc-windows-sha256-${{ env.PACKAGE_VERSION }}.txt
          asset_content_type: text/plain

      - name: Upload macos checksum release asset
        id: upload-macos-checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.release_upload_url }}
          asset_path: ./dist-cli/bwdc-macos-sha256-${{ env.PACKAGE_VERSION }}.txt
          asset_name: bwdc-macos-sha256-${{ env.PACKAGE_VERSION }}.txt
          asset_content_type: text/plain

      - name: Upload linux checksum release asset
        id: upload-linux-checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup.outputs.release_upload_url }}
          asset_path: ./dist-cli/bwdc-linux-sha256-${{ env.PACKAGE_VERSION }}.txt
          asset_name: bwdc-linux-sha256-${{ env.PACKAGE_VERSION }}.txt
          asset_content_type: text/plain


  windows-gui:
    runs-on: windows-latest
    needs: setup
    environment: prod 
    steps:
      - name: Set up dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.x"

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Set Node options
        run: echo "NODE_OPTIONS=--max_old_space_size=4096" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Print environment
        run: |
          node --version
          npm --version
          dotnet --version

      - name: Install AST
        shell: pwsh
        run: |
          cd $HOME
          git clone https://github.com/vcsjones/AzureSignTool.git
          cd AzureSignTool
          $latest_head = $(git rev-parse HEAD)[0..9] -join ""
          $latest_version = "0.0.0-g$latest_head"
          Write-Host "--------"
          Write-Host "git commit - $(git rev-parse HEAD)"
          Write-Host "latest_head - $latest_head"
          Write-Host "PACKAGE VERSION TO BUILD - $latest_version"
          Write-Host "--------"
          dotnet restore
          dotnet pack --output ./nupkg
          dotnet tool install --global --ignore-failed-sources --add-source ./nupkg --version $latest_version azuresigntool
          cd $HOME

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set PACKAGE_VERSION & VER_INFO
        run: |
          $env:pkgVersion = (Get-Content -Raw -Path .\src\package.json | ConvertFrom-Json).version
          echo "PACKAGE_VERSION=$env:pkgVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "WIN_PKG=$env:WIN_PKG" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "version: $env:pkgVersion"

          if(Test-Path -Path $env:WIN_PKG) {
            echo "VER_INFO=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
        env:
          WIN_PKG: C:\Users\runneradmin\.pkg-cache\v2.5\fetched-v10.4.1-win-x64

      - name: Install Node dependencies
        run: npm install

      - name: Run linter
        run: npm run lint

      - name: npm rebuild
        run: npm run rebuild

      - name: Build & Sign
        run: |
          npm run publish:win
        env:
          ELECTRON_BUILDER_SIGN: 1
          SIGNING_VAULT_URL: ${{ secrets.SIGNING_VAULT_URL }}
          SIGNING_CLIENT_ID: ${{ secrets.SIGNING_CLIENT_ID }}
          SIGNING_TENANT_ID: ${{ secrets.SIGNING_TENANT_ID }}
          SIGNING_CLIENT_SECRET: ${{ secrets.SIGNING_CLIENT_SECRET }}
          SIGNING_CERT_NAME: ${{ secrets.SIGNING_CERT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: List Dist
        run: dir ./dist


  linux:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Set Node options
        run: echo "NODE_OPTIONS=--max_old_space_size=4096" >> $GITHUB_ENV

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get -y install pkg-config libxss-dev libsecret-1-dev 
          sudo apt-get -y install rpm

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set PACKAGE_VERSION
        shell: pwsh
        run: |
          $env:pkgVersion = (Get-Content -Raw -Path .\src\package.json | ConvertFrom-Json).version
          echo "PACKAGE_VERSION=$env:pkgVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "version: $env:pkgVersion"

      - name: npm install
        run: npm install

      - name: npm rebuild
        run: npm run rebuild

      - name: npm package
        run: npm run publish:lin
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}


  macos:
    runs-on: macos-latest
    needs: setup
    if: false
    steps:
      - name: place holder
        run: exit 0

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Set Node options
        run: echo "NODE_OPTIONS=--max_old_space_size=4096" >> $GITHUB_ENV

      - name: Print environment
        run: |
          node --version
          npm --version
          Write-Output "GitHub ref: $env:GITHUB_REF"
          Write-Output "GitHub event: $env:GITHUB_EVENT"
        shell: pwsh
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_EVENT: ${{ github.event_name }}

      - name: Checkout repo
        uses: actions/checkout@v2

      # Requires Fixing
      - name: Decrypt secrets
        run: ./.github/scripts/macos/decrypt-secrets.ps1
        shell: pwsh
        env:
          DECRYPT_FILE_PASSWORD: ${{ secrets.DECRYPT_FILE_PASSWORD }}

      # Requires Fixing
      - name: Set up keychain
        run: ./.github/scripts/macos/setup-keychain.ps1
        shell: pwsh
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          DESKTOP_KEY_PASSWORD: ${{ secrets.DESKTOP_KEY_PASSWORD }}
          DEVID_CERT_PASSWORD: ${{ secrets.DEVID_CERT_PASSWORD }}
          APPSTORE_CERT_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          MACDEV_CERT_PASSWORD: ${{ secrets.MACDEV_CERT_PASSWORD }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      # Requires Fixing?
      - name: Set up provisioning profiles
        run: ./.github/scripts/macos/setup-profiles.ps1
        shell: pwsh

      # Requires Fixing?
      - name: Increment version
        run: ./.github/scripts/macos/increment-version.ps1
        shell: pwsh

      - name: Load package version
        run: ./.github/scripts/load-version.ps1
        shell: pwsh

      - name: Install Node dependencies
        run: npm install

      - name: Run linter
        run: npm run lint

      # Requires Fixing
      - name: Build application (dist)
        run: npm run dist:mac
        env:
          APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      # Requires Fixing
      - name: Upload .zip artifact
        uses: actions/upload-artifact@v2
        with:
          name: Bitwarden-${{ env.PACKAGE_VERSION }}-mac.zip
          path: ./dist/Bitwarden-${{ env.PACKAGE_VERSION }}-mac.zip

      # Requires Fixing
      - name: Upload .dmg artifact
        uses: actions/upload-artifact@v2
        with:
          name: Bitwarden-${{ env.PACKAGE_VERSION }}.dmg
          path: ./dist/Bitwarden-${{ env.PACKAGE_VERSION }}.dmg

      # Requires Fixing
      - name: Build application for App Store
        run: npm run dist:mac:mas
        env:
          APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      # Requires Fixing
      - name: Upload .pkg artifact
        uses: actions/upload-artifact@v2
        with:
          name: Bitwarden-${{ env.PACKAGE_VERSION }}.pkg
          path: ./dist/mas/Bitwarden-${{ env.PACKAGE_VERSION }}.pkg

      # Requires Fixing
      - name: Deploy to App Store
        run: npm run upload:mas
        env:
          APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      - name: Upload release assets
        shell: pwsh
        run: |
          hub release edit `
            -a ./dist/mas/Bitwarden-${{ env.PACKAGE_VERSION }}.pkg `
            -m "$($env:RELEASE_TAG_NAME.TrimStart('v'))" `
            $env:RELEASE_TAG_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          RELEASE_TAG_NAME: ${{ github.event.inputs.release_tag_name }}
